#!/usr/bin/env ruby
# generate GDF file from the relation data generated by `generate_relation_data`
#
# result can be loaded in Gephi for visualization

BLOGS = {}
BLOGS_IN = {}
BLOGS_OUT = {}

RED_EDGES = []
EMPTY_EDGES = []
CIRCULAR_EDGES = []

ARGF.each_line do |line|
  if line =~ /^(.*) (.*) all (.*) (.*)$/
    blog1name = $1
    blog1 = blog1name.tr('-','_')

    blog2name = $2
    blog2 = blog2name.tr('-','_')

    weight = $3

    blog1 = "_"+blog1 if blog1 =~ /^[0-9]/
    blog2 = "_"+blog2 if blog2 =~ /^[0-9]/

    next if BLOGS_OUT[blog1]

    BLOGS[blog1] ||= blog1name
    BLOGS[blog2] ||= blog2name

    BLOGS_IN[blog2] ||= {}
    BLOGS_IN[blog2][blog1] = weight.to_i

    BLOGS_OUT[blog1] = { name: blog2, weight: weight.to_i }
  end
end

# find circular edges with one length, and remove them from the graph
BLOGS_OUT.each_pair do |blog1, values|
  blog2 = values[:name]
  if BLOGS_OUT[values[:name]]&.dig(:name) == blog1
    RED_EDGES << [ blog1, blog2, values[:weight] ]
  end
end

RED_EDGES.each do |edge|
  BLOGS_OUT.delete(edge[0])
  BLOGS_IN.delete(edge[0])
end

old_count = 0

while old_count != BLOGS_OUT.count
  old_count = BLOGS_OUT.count
  # find edges that are connected to nodes that don't have this as an input

  BLOGS_OUT.each_pair do |blog1, values|
    if !BLOGS_IN[blog1] || BLOGS_IN[blog1].empty?
      EMPTY_EDGES << [ blog1, values[:name], values[:weight] ]
    end
  end

  EMPTY_EDGES.each do |edge|
    BLOGS_OUT.delete(edge[0])
    BLOGS_IN.dig(edge[1])&.delete(edge[0])
  end

  # find edges that are connected to nodes that don't have an output

  BLOGS_OUT.each_pair do |blog1, values|
    if !BLOGS_OUT[values[:name]]
      EMPTY_EDGES << [ blog1, values[:name], values[:weight] ]
    end
  end

  EMPTY_EDGES.each do |edge|
    BLOGS_OUT.delete(edge[0])
    BLOGS_IN.dig(edge[1])&.delete(edge[0])
  end
end

puts "nodedef>name VARCHAR,label VARCHAR"

BLOGS.each_pair do |blog, blogname|
  puts "#{blog},#{blogname}"
end

puts "edgedef>node1 VARCHAR,node2 VARCHAR, weight DOUBLE, directed BOOLEAN, color VARCHAR"

RED_EDGES.each do |edge|
  puts [edge[0], edge[1], edge[2], true, "'192,0,0'"].join(",")
end

EMPTY_EDGES.each do |edge|
  puts [edge[0], edge[1], edge[2], true, "'0,0,0'"].join(",")
end
